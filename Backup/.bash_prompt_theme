# bash-git-prompt
override_git_prompt_colors() {

  GIT_PROMPT_THEME_NAME="Custom"

  GIT_PROMPT_ONLY_IN_REPO=0
  GIT_PROMPT_FETCH_REMOTE_STATUS=0
  GIT_PROMPT_SHOW_UPSTREAM=1

  # determines counting of untracked files
  # Possible values: no, normal, all
  GIT_PROMPT_SHOW_UNTRACKED_FILES=normal

  # print the number of changed files
  GIT_PROMPT_SHOW_CHANGED_FILES_COUNT=1

  Grey="${ResetColor}\[\e[0;90m\]"

  Time12a="\$(date '+%I:%M:%S %p')"
  PathShort="${Yellow}\w${ResetColor}";

  ## These are the color definitions used by gitprompt.sh
  GIT_PROMPT_PREFIX="${ResetColor}\r[ "                      # start of the git info string
  GIT_PROMPT_SUFFIX=" | ${Grey}_GIT_EMAIL_${ResetColor} ]\n" # the end of the git info string
  GIT_PROMPT_SEPARATOR="${ResetColor} |"                     # separates each item

  GIT_PROMPT_BRANCH="${Yellow}"                              # the git branch that is active in the current directory
  GIT_PROMPT_STAGED="${Yellow} ●"                            # the number of staged files/directories
  GIT_PROMPT_CONFLICTS="${Red} ✖ "                           # the number of files in conflict
  GIT_PROMPT_CHANGED="${Green} +"                            # the number of changed files
  GIT_PROMPT_UNTRACKED="${Cyan} …"                           # the number of untracked files/dirs
  GIT_PROMPT_STASHED="${BoldBlue} ⚑"                         # the number of stashed files/dir
  GIT_PROMPT_CLEAN="${BoldGreen} ✔"                          # a colored flag indicating a "clean" repo

  GIT_PROMPT_UPSTREAM=" → ${Cyan}_UPSTREAM_"                 # remote tracking branch (_UPSTREAM_ is placeholder for branch name)
  GIT_PROMPT_REMOTE=" ${ResetColor}"                         # the remote branch name (if any) and the symbols for ahead and behind

  GIT_PROMPT_SYMBOLS_AHEAD="${Green} ↑·"                     # The symbol for "n versions ahead of origin"
  GIT_PROMPT_SYMBOLS_BEHIND="${Red}↓·"                       # The symbol for "n versions behind of origin"
  GIT_PROMPT_SYMBOLS_PREHASH=":"                             # Written before hash of commit, if no name could be found
  GIT_PROMPT_SYMBOLS_NO_REMOTE_TRACKING="→ ${Red}local"      # This symbol is written after the branch, if the branch is not tracked


  ## For the command indicator, the placeholder _LAST_COMMAND_STATE_
  ## will be replaced with the exit code of the last command
  ## e.g.
  ## GIT_PROMPT_COMMAND_OK="${Green}✔-_LAST_COMMAND_STATE_ "    # indicator if the last command returned with an exit code of 0
  ## GIT_PROMPT_COMMAND_FAIL="${Red}✘-_LAST_COMMAND_STATE_ "    # indicator if the last command returned with an exit code of other than 0

  GIT_PROMPT_COMMAND_OK="${Green}✔"
  GIT_PROMPT_COMMAND_FAIL="${Red}(_LAST_COMMAND_STATE_) ✘"

  prompt_color="${ResetColor}\[\e[${prompt_color}m\]"
  user_color="${ResetColor}\[\e[${user_color}m\]"

  userhost="${user_color}\u${Grey}@${prompt_color}\h${ResetColor}"
  virtual_env="_VENVSTART_${ResetColor}(virtual_env: ${prompt_color}_VENV_${ResetColor})\n_VENVEND_"

  # _LAST_COMMAND_INDICATOR_ will be replaced by the appropriate GIT_PROMPT_COMMAND_OK OR GIT_PROMPT_COMMAND_FAIL
  GIT_PROMPT_START_USER="${Grey}_PROMPT_FILL_ _LAST_COMMAND_INDICATOR_ ${Grey}${Time12a}\n\n${userhost} ${PathShort}${ResetColor}\n"
  GIT_PROMPT_END_USER="${virtual_env}${Grey}$ ${ResetColor}"
}

reload_git_prompt_colors "Custom"
